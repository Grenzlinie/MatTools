{
    "uuid": "e216debf-842d-41a4-9d36-3a26ba115257",
    "filename": "/Users/siyuliu/Desktop/MacBot/src/tool_source_code/pymatgen-analysis-defects/tests/test_recombination.py",
    "imports": [
        "import itertools",
        "import numpy as np",
        "import pytest",
        "from pymatgen.analysis.defects.recombination import (\n    analytic_overlap_NM,\n    boltzmann_filling,\n    get_mQn,\n    get_Rad_coef,\n    get_SRH_coef,\n    pchip_eval,\n)"
    ],
    "classes": [],
    "global functions": [
        "def test_boltzmann() -> None:\n    ref_results = [\n        0.9791034813819097,\n        0.020459854127734073,\n        0.00042753972270360594,\n        8.934091775449048e-06,\n        1.8669141512139823e-07,\n        3.901200631921917e-09,\n    ]\n    results = boltzmann_filling(0.1, 300, n_states=6)\n    assert np.allclose(results.flatten(), ref_results, rtol=1e-3)\n    results2 = boltzmann_filling(0.1, [100, 300], n_states=6)\n    assert np.allclose(results2[:, 1], ref_results, rtol=1e-3)",
        "def test_get_vibronic_matrix_elements() -> None:\n    # precompute values of the overlap\n    dQ, omega_i, omega_f = 0, 0.2, 0.2\n    Ni, Nf = 5, 5\n    ovl = np.zeros((Ni, Nf), dtype=np.longdouble)\n    for m, n in itertools.product(range(Ni), range(Nf)):\n        ovl[m, n] = analytic_overlap_NM(dQ, omega_i, omega_f, m, n)\n\n    e, matel = get_mQn(\n        omega_i=omega_i, omega_f=omega_f, m_init=0, Nf=Nf, dQ=dQ, ovl=ovl\n    )\n    ref_result = [0.0, 3984589.0407885523, 0.0, 0.0, 0.0]\n    assert np.allclose(matel, ref_result)",
        "def test_pchip_eval() -> None:\n    x_c = np.linspace(0, 2, 5)\n    y_c = np.sin(x_c) + 1\n    xx = np.linspace(-3, 3, 1000)\n    fx = pchip_eval(xx, x_coarse=x_c, y_coarse=y_c)\n    int_val = np.trapz(np.nan_to_num(fx), x=xx)\n    int_ref = np.sum(y_c)\n    assert int_val == pytest.approx(int_ref, rel=1e-3)",
        "def test_get_SRH_coef() -> None:\n    ref_res = [4.64530153e-14, 4.64752885e-14, 4.75265302e-14]\n    res = get_SRH_coef(\n        T=[100, 200, 300],\n        dQ=1.0,\n        dE=1.0,\n        omega_i=0.2,\n        omega_f=0.2,\n        elph_me=1,\n        volume=1,\n        g=1,\n    )\n    assert np.allclose(res, ref_res)",
        "def test_get_Rad_coef() -> None:\n    get_Rad_coef(\n        T=[100, 200, 300],\n        dQ=1.0,\n        dE=1.0,\n        omega_i=0.2,\n        omega_f=0.2,\n        omega_photon=0.6,\n        dipole_me=1,\n        volume=1,\n        g=1,\n    )"
    ],
    "global variables": []
}