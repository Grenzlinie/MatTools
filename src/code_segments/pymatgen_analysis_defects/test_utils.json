{
    "uuid": "69fb57d8-ea4e-450b-a007-2a1e39f041e7",
    "filename": "/Users/siyuliu/Desktop/MacBot/src/tool_source_code/pymatgen-analysis-defects/tests/test_utils.py",
    "imports": [
        "import numpy as np",
        "import pytest",
        "from pymatgen.analysis.defects.core import Interstitial, PeriodicSite, Vacancy",
        "from pymatgen.analysis.defects.utils import (\n    ChargeInsertionAnalyzer,\n    TopographyAnalyzer,\n    cluster_nodes,\n    get_avg_chg,\n    get_local_extrema,\n    get_localized_states,\n    get_plane_spacing,\n    group_docs,\n)",
        "from pymatgen.analysis.structure_matcher import StructureMatcher",
        "from pymatgen.core.periodic_table import Specie",
        "from pymatgen.io.vasp.outputs import Chgcar"
    ],
    "classes": [],
    "global functions": [
        "def test_get_local_extrema(gan_struct) -> None:\n    data = np.ones((48, 48, 48))\n    chgcar = Chgcar(poscar=gan_struct, data={\"total\": data})\n    frac_pos = [[0, 0, 0], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5], [0.75, 0.75, 0.75]]\n    for fpos in frac_pos:\n        idx = np.multiply(fpos, chgcar.data[\"total\"].shape).astype(int)\n        chgcar.data[\"total\"][idx[0], idx[1], idx[2]] = 0\n    loc_min = get_local_extrema(chgcar, frac_pos)\n    for a, b in zip(sorted(loc_min.tolist()), sorted(frac_pos)):\n        assert np.allclose(a, b)",
        "def test_cluster_nodes(gan_struct) -> None:\n    frac_pos = [\n        [0, 0, 0],\n        [0.25, 0.25, 0.25],\n        [0.5, 0.5, 0.5],\n        [0.75, 0.75, 0.75],\n    ]\n    added = [\n        [0.0002, 0.0001, 0.0001],\n        [0.0002, 0.0002, 0.0003],\n        [0.25001, 0.24999, 0.24999],\n        [0.25, 0.249999, 0.250001],\n    ]  # all the displacements are positive so we dont have to worry about periodic boundary conditions\n    clusters = cluster_nodes(frac_pos + added, gan_struct.lattice)\n\n    for a, b in zip(sorted(clusters.tolist()), sorted(frac_pos)):\n        assert np.allclose(a, b, atol=0.001)",
        "def test_get_avg_chg(gan_struct) -> None:\n    data = np.ones((48, 48, 48))\n    chgcar = Chgcar(poscar=gan_struct, data={\"total\": data})\n    fpos = [0.1, 0.1, 0.1]\n    avg_chg_sphere = get_avg_chg(chgcar, fpos)\n    avg_chg = np.sum(chgcar.data[\"total\"]) / chgcar.ngridpts / chgcar.structure.volume\n    pytest.approx(avg_chg_sphere, avg_chg)",
        "def test_chgcar_insertion(chgcar_fe3o4) -> None:\n    chgcar = chgcar_fe3o4\n    insert_ref = [\n        (\n            0.03692438178614583,\n            [[0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.5, 0.0], [0.5, 0.0, 0.0]],\n        ),  # corners and edge centers\n        (\n            0.10068764899215804,\n            [[0.375, 0.375, 0.375], [0.625, 0.625, 0.625]],\n        ),  # center of Fe-O cages\n    ]\n    cia = ChargeInsertionAnalyzer(chgcar)\n    insert_groups = cia.filter_and_group(max_avg_charge=0.5)\n    for (avg_chg, group), (ref_chg, ref_fpos) in zip(insert_groups, insert_ref):\n        fpos = sorted(group)\n        pytest.approx(avg_chg, ref_chg)\n        assert np.allclose(fpos, ref_fpos)",
        "def test_topography_analyzer(chgcar_fe3o4) -> None:\n    struct = chgcar_fe3o4.structure\n    ta = TopographyAnalyzer(struct, [\"Fe\", \"O\"], [], check_volume=True)\n    node_struct = ta.get_structure_with_nodes()\n    # All sites with species X\n    dummy_sites = [site for site in node_struct if site.specie.symbol == \"X\"]\n    assert len(dummy_sites) == 100\n\n    # Check value error\n    with pytest.raises(ValueError):\n        ta = TopographyAnalyzer(struct, [\"O\"], [\"Fe\"], check_volume=True)",
        "def test_get_localized_states(v_ga) -> None:\n    vaspruns = v_ga[(0, -1)][\"vaspruns\"]\n    procar = v_ga[(0, -1)][\"procar\"]\n    vr = vaspruns[1]\n    bs = vr.get_band_structure()\n    get_localized_states(bs, procar=procar)\n    loc_bands = set()\n    for iband, _ikpt, _ispin, _val in get_localized_states(bs, procar=procar):\n        loc_bands.add(iband)\n    assert loc_bands == {\n        138,\n    }\n\n    vaspruns = v_ga[(-1, 0)][\"vaspruns\"]\n    procar = v_ga[(-1, 0)][\"procar\"]\n    vr = vaspruns[1]\n    bs = vr.get_band_structure()\n\n    loc_bands = set()\n    for iband, _ikpt, _ispin, _val in get_localized_states(\n        bs, procar=procar, band_window=100\n    ):\n        loc_bands.add(iband)\n    assert loc_bands == {75, 77}  # 75 and 77 are more localized core states",
        "def test_group_docs(gan_struct) -> None:\n    s = gan_struct.copy()\n    vac1 = Vacancy(s, s.sites[0])\n    vac2 = Vacancy(s, s.sites[1])\n    vac3 = Vacancy(s, s.sites[2])\n    vac4 = Vacancy(s, s.sites[3])\n\n    def get_interstitial(fpos):\n        n_site = PeriodicSite(Specie(\"N\"), fpos, s.lattice)\n        return Interstitial(s, n_site)\n\n    # two interstitials are at inequivalent sites so should be in different groups\n    int1 = get_interstitial([0.0, 0.0, 0.0])\n    int2 = get_interstitial([0.0, 0.0, 0.25])\n    sm = StructureMatcher()\n    # Test that the grouping works without a key function (only structure)\n    sgroups = group_docs(\n        [vac1, vac2, int1, vac3, vac4, int2],\n        sm,\n        lambda x: x.defect_structure,\n    )\n    res = []\n    for _, group in sgroups:\n        defect_names = \",\".join([x.name for x in group])\n        res.append(defect_names)\n    # the final sorted groups\n    assert \"|\".join(sorted(res)) == \"N_i|N_i|v_Ga,v_Ga|v_N,v_N\"\n\n    # Test that the grouping works with a key function (structure and name)\n    sgroups = group_docs(\n        [vac1, vac2, int1, vac3, vac4, int1, int2],\n        sm,\n        lambda x: x.defect_structure,\n        lambda x: x.name,\n    )\n    res = []\n    g_names = []\n    for name, group in sgroups:\n        defect_names = \",\".join([x.name for x in group])\n        g_names.append(name)\n        res.append(defect_names)\n    assert \"|\".join(sorted(res)) == \"N_i|N_i,N_i|v_Ga,v_Ga|v_N,v_N\"\n    assert \"|\".join(sorted(g_names)) == \"N_i:0|N_i:1|v_Ga|v_N\"",
        "def test_plane_spacing(gan_struct) -> None:\n    lattice = gan_struct.lattice.matrix\n    assert np.allclose(get_plane_spacing(lattice), [2.785, 2.785, 5.239], atol=0.001)"
    ],
    "global variables": []
}