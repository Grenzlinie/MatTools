{
    "uuid": "48863bfe-d319-441a-8dfa-91491439ef52",
    "filename": "/Users/siyuliu/Desktop/MacBot/src/tool_source_code/pymatgen-analysis-defects/tests/test_thermo.py",
    "imports": [
        "import copy",
        "import os",
        "import numpy as np",
        "import pytest",
        "from matplotlib import pyplot as plt",
        "from pymatgen.analysis.defects.core import Interstitial, NamedDefect",
        "from pymatgen.analysis.defects.corrections.freysoldt import plot_plnr_avg",
        "from pymatgen.analysis.defects.thermo import (\n    Composition,\n    ComputedEntry,\n    DefectEntry,\n    FormationEnergyDiagram,\n    MultiFormationEnergyDiagram,\n    ensure_stable_bulk,\n    get_lower_envelope,\n    get_transitions,\n    group_defect_entries,\n    plot_formation_energy_diagrams,\n)",
        "from pymatgen.analysis.phase_diagram import PhaseDiagram",
        "from pymatgen.core import Element, PeriodicSite"
    ],
    "classes": [],
    "global functions": [
        "def test_lower_envelope() -> None:\n    # Test the lower envelope and transition code with a simple example\n    lines = [[4, 12], [-1, 3], [-5, 4], [-2, 1], [3, 8], [-4, 14], [2, 12], [3, 8]]\n    lower_envelope_ref = [\n        (4, 12),\n        (3, 8),\n        (-2, 1),\n        (-5, 4),\n    ]  # answer from visual inspection (ordered)\n    transitions_ref = [(-4, -4), (-1.4, 3.8), (1, -1)]\n    lower_envelope = get_lower_envelope(lines)\n    assert lower_envelope == lower_envelope_ref\n    assert get_transitions(lower_envelope, -5, 2) == [\n        (-5, -8),\n        *transitions_ref,\n        (2, -6),\n    ]",
        "def test_defect_entry(defect_entries_and_plot_data_Mg_Ga, data_Mg_Ga) -> None:\n    defect_entries, plot_data = defect_entries_and_plot_data_Mg_Ga\n\n    def_entry = defect_entries[0]\n    assert def_entry.corrections[\"freysoldt\"] == pytest.approx(0.00, abs=1e-4)\n\n    # test that the plotting code runs\n    plot_plnr_avg(plot_data[0][1])\n    plot_plnr_avg(defect_entries[1].corrections_metadata[\"freysoldt\"][\"plot_data\"][1])\n\n    vr1 = plot_data[0][1][\"pot_plot_data\"][\"Vr\"]\n    vr2 = defect_entries[0].corrections_metadata[\"freysoldt\"][\"plot_data\"][1][\n        \"pot_plot_data\"\n    ][\"Vr\"]\n    assert np.allclose(vr1, vr2)\n\n    bulk_vasprun = data_Mg_Ga[\"bulk_sc\"][\"vasprun\"]\n    bulk_entry = bulk_vasprun.get_computed_entry(inc_structure=False)\n    def_entry = defect_entries[0]\n    # raise runtime error if bulk_entry is not provided\n    with pytest.raises(RuntimeError):\n        def_entry.get_ediff()\n\n    def_entry.bulk_entry = bulk_entry\n    ediff = def_entry.sc_entry.energy - bulk_entry.energy\n    assert def_entry.get_ediff() == pytest.approx(ediff, abs=1e-4)",
        "def test_formation_energy_diagram_using_bulk_entry(formation_energy_diagram) -> None:\n    fed = copy.deepcopy(formation_energy_diagram)\n    def_ents_w_bulk = copy.deepcopy(fed.defect_entries)\n\n    # Raise error if bulk_entry is not provided when some\n    # of the defect entries are missing bulk_entry data\n    with pytest.raises(RuntimeError):\n        FormationEnergyDiagram(\n            defect_entries=fed.defect_entries,\n            vbm=fed.vbm,\n            pd_entries=fed.pd_entries,\n        )\n\n    # Should work with if bulk_entry is provided by the defect entries\n    for dent in def_ents_w_bulk:\n        dent.bulk_entry = fed.bulk_entry\n\n    fed = FormationEnergyDiagram(\n        defect_entries=def_ents_w_bulk,\n        vbm=fed.vbm,\n        pd_entries=fed.pd_entries,\n    )\n    assert len(fed.chempot_limits) == 3\n\n    # if both bulk_entry and defect_entries.bulk_entry are provided (by accident)\n    # the code should still work.\n    fed = FormationEnergyDiagram(\n        defect_entries=def_ents_w_bulk,\n        vbm=fed.vbm,\n        bulk_entry=fed.bulk_entry,\n        pd_entries=fed.pd_entries,\n    )\n    assert len(fed.chempot_limits) == 3\n    assert fed.defect_chemsys == \"Ga-Mg-N\"\n    assert fed.bulk_formula == \"GaN\"",
        "def test_formation_energy_diagram_shape_fixed(formation_energy_diagram) -> None:\n    fed = copy.deepcopy(formation_energy_diagram)\n\n    # check that the shape of the formation energy diagram does not change\n    cp_dict = fed.chempot_limits[0]\n    form_en = np.array(fed.get_transitions(cp_dict, 0, 5))\n    x_ref = form_en[:, 0]\n    y_ref = form_en[:, 1]\n    y_ref = y_ref - y_ref.min()\n\n    for point in fed.chempot_limits:\n        form_en = np.array(fed.get_transitions(point, 0, 5))\n        x = form_en[:, 0]\n        y = form_en[:, 1]\n        y = y - y.min()\n        assert np.allclose(x, x_ref)\n        assert np.allclose(y, y_ref)",
        "def test_formation_energy_diagram_using_atomic_entries(\n    formation_energy_diagram,\n) -> None:\n    # test the constructor with materials project phase diagram\n    fed = copy.deepcopy(formation_energy_diagram)\n    atomic_entries = list(\n        filter(lambda x: len(x.composition.elements) == 1, fed.pd_entries)\n    )\n    pd = PhaseDiagram(fed.pd_entries)\n    fed = FormationEnergyDiagram.with_atomic_entries(\n        defect_entries=fed.defect_entries,\n        atomic_entries=atomic_entries,\n        vbm=fed.vbm,\n        inc_inf_values=False,\n        phase_diagram=pd,\n        bulk_entry=fed.bulk_entry,\n    )\n    assert len(fed.chempot_limits) == 3",
        "def test_formation_energy_diagram_numerical(formation_energy_diagram) -> None:\n    # Create a fake defect entry independent of the test data\n    fed = copy.deepcopy(formation_energy_diagram)\n    fake_defect_entry = fed.defect_entries[0]\n    fake_defect_entry.sc_entry._energy = fed.bulk_entry.energy + 1\n    fake_defect_entry.charge_state = 0\n    fake_defect_entry.corrections = {}\n    pd_entries = copy.deepcopy(fed.pd_entries)\n    for p in pd_entries:\n        p._energy = 0\n\n    fed = FormationEnergyDiagram(\n        bulk_entry=fed.bulk_entry,\n        defect_entries=[fake_defect_entry],\n        vbm=fed.vbm,\n        pd_entries=pd_entries,\n    )\n    assert fed.get_formation_energy(\n        fermi_level=fed.vbm,\n        chempot_dict={e: 0 for e in fed.defect_entries[0].defect.element_changes},\n    ) == pytest.approx(1)\n\n    assert fed.get_concentration(\n        fermi_level=fed.vbm,\n        chempots={e: 0 for e in fed.defect_entries[0].defect.element_changes},\n        temperature=300,\n    ) == pytest.approx(2 * 1.5875937551666035e-17)",
        "def test_competing_phases(formation_energy_diagram) -> None:\n    fed = copy.deepcopy(formation_energy_diagram)\n    cp_at_point = dict()\n    for chempot_, competing_phases_ in zip(fed.chempot_limits, fed.competing_phases):\n        key = \",\".join([f\"{k}:{v:0.2f}\" for k, v in chempot_.items()])\n        cp_at_point[key] = set(competing_phases_.keys())\n\n    ref_dict = {\n        \"Mg:-1.50,Ga:-1.75,N:0.00\": {\"N2\", \"Mg3N2\"},\n        \"Mg:-0.35,Ga:-0.03,N:-1.71\": {\"Mg2Ga5\", \"Mg3N2\"},\n        \"Mg:-0.44,Ga:0.00,N:-1.75\": {\"Mg2Ga5\", \"Ga\"},\n    }\n\n    assert cp_at_point == ref_dict",
        "def test_multi(\n    data_Mg_Ga, defect_entries_and_plot_data_Mg_Ga, stable_entries_Mg_Ga_N\n) -> None:\n    bulk_vasprun = data_Mg_Ga[\"bulk_sc\"][\"vasprun\"]\n    bulk_dos = bulk_vasprun.complete_dos\n    _, vbm = bulk_dos.get_cbm_vbm()\n    bulk_entry = bulk_vasprun.get_computed_entry(inc_structure=False)\n    defect_entries, plot_data = defect_entries_and_plot_data_Mg_Ga\n    def_ent_list = list(defect_entries.values())\n\n    with pytest.raises(\n        ValueError,\n        match=\"Defects are not of same type! Use MultiFormationEnergyDiagram for multiple defect types\",\n    ):\n        inter = Interstitial(\n            structure=defect_entries[0].defect.structure,\n            site=PeriodicSite(\n                \"H\", [0, 0, 0], defect_entries[0].defect.structure.lattice\n            ),\n        )\n        fake_defect_entry = DefectEntry(\n            defect=inter, sc_entry=defect_entries[0].sc_entry, charge_state=0\n        )\n        FormationEnergyDiagram(\n            bulk_entry=bulk_entry,\n            defect_entries=[*def_ent_list, fake_defect_entry],\n            vbm=vbm,\n            pd_entries=stable_entries_Mg_Ga_N,\n            inc_inf_values=False,\n        )\n\n    fed = FormationEnergyDiagram(\n        bulk_entry=bulk_entry,\n        defect_entries=def_ent_list,\n        vbm=vbm,\n        pd_entries=stable_entries_Mg_Ga_N,\n        inc_inf_values=False,\n    )\n    mfed = MultiFormationEnergyDiagram(formation_energy_diagrams=[fed])\n    cpots = fed.get_chempots(Element(\"Ga\"))\n    ef = mfed.solve_for_fermi_level(chempots=cpots, temperature=300, dos=bulk_dos)\n    assert ef > 0\n\n    # test the constructor with materials project phase diagram\n    atomic_entries = list(\n        filter(lambda x: len(x.composition.elements) == 1, stable_entries_Mg_Ga_N)\n    )\n    pd = PhaseDiagram(stable_entries_Mg_Ga_N)\n    mfed = MultiFormationEnergyDiagram.with_atomic_entries(\n        bulk_entry=bulk_entry,\n        defect_entries=def_ent_list,\n        atomic_entries=atomic_entries,\n        phase_diagram=pd,\n        vbm=vbm,\n    )\n    assert len(mfed.formation_energy_diagrams) == 1",
        "def test_formation_from_directory(\n    test_dir, stable_entries_Mg_Ga_N, defect_Mg_Ga\n) -> None:\n    sc_dir = test_dir / \"Mg_Ga\"\n    qq = []\n    for q in [-1, 0, 1]:\n        qq.append(q)\n        dmap = {\"bulk\": sc_dir / \"bulk_sc\"}\n        dmap.update(zip(qq, map(lambda x: sc_dir / f\"q={x}\", qq)))\n        assert len(dmap) == len(qq) + 1\n        fed = FormationEnergyDiagram.with_directories(\n            directory_map=dmap,\n            defect=defect_Mg_Ga,\n            pd_entries=stable_entries_Mg_Ga_N,\n            dielectric=10,\n        )\n        trans = fed.get_transitions(fed.chempot_limits[1], x_min=-100, x_max=100)\n        assert len(trans) == 1 + len(qq)",
        "def test_ensure_stable_bulk(stable_entries_Mg_Ga_N) -> None:\n    entries = stable_entries_Mg_Ga_N\n    pd = PhaseDiagram(stable_entries_Mg_Ga_N)\n    bulk_comp = Composition(\"GaN\")\n    fake_bulk_ent = ComputedEntry(bulk_comp, energy=pd.get_hull_energy(bulk_comp) + 2)\n    # removed GaN from the stable entries\n    entries = list(\n        filter(lambda x: x.composition.reduced_formula != \"GaN\", stable_entries_Mg_Ga_N)\n    )\n    pd1 = PhaseDiagram([*entries, fake_bulk_ent])\n    assert \"GaN\" not in [e.composition.reduced_formula for e in pd1.stable_entries]\n    pd2 = ensure_stable_bulk(pd, fake_bulk_ent)\n    assert \"GaN\" in [e.composition.reduced_formula for e in pd2.stable_entries]",
        "def test_plotter(\n    data_Mg_Ga, defect_entries_and_plot_data_Mg_Ga, stable_entries_Mg_Ga_N, plot_fn\n) -> None:\n    bulk_vasprun = data_Mg_Ga[\"bulk_sc\"][\"vasprun\"]\n    bulk_dos = bulk_vasprun.complete_dos\n    _, vbm = bulk_dos.get_cbm_vbm()\n    bulk_entry = bulk_vasprun.get_computed_entry(inc_structure=False)\n    defect_entries, _ = defect_entries_and_plot_data_Mg_Ga\n    def_ent_list = list(defect_entries.values())\n\n    fed = FormationEnergyDiagram(\n        bulk_entry=bulk_entry,\n        defect_entries=def_ent_list,\n        vbm=vbm,\n        pd_entries=stable_entries_Mg_Ga_N,\n        inc_inf_values=False,\n    )\n    with pytest.raises(\n        ValueError,\n        match=\"Must specify xlim or set band_gap attribute\",\n    ):\n        plot_formation_energy_diagrams(\n            fed, chempots=fed.chempot_limits[0], show=False, save=False\n        )\n    fed.band_gap = 1\n    axis = plot_formation_energy_diagrams(\n        fed,\n        chempots=fed.chempot_limits[0],\n        show=False,\n        xlim=[0, 2],\n        ylim=[0, 4],\n        save=False,\n    )\n    mfed = MultiFormationEnergyDiagram(formation_energy_diagrams=[fed])\n    plot_formation_energy_diagrams(\n        mfed,\n        chempots=fed.chempot_limits[0],\n        show=False,\n        save=False,\n        only_lower_envelope=False,\n        axis=axis,\n        legend_prefix=\"test\",\n        linestyle=\"--\",\n        line_alpha=1,\n        linewidth=1,\n    )\n    plot_fn(fed, fed.chempot_limits[0])",
        "def test_defect_entry_grouping(defect_entries_and_plot_data_Mg_Ga) -> None:\n    defect_entries_dict, _ = defect_entries_and_plot_data_Mg_Ga\n    defect_entries = list(defect_entries_dict.values())\n    for g_name, g in group_defect_entries(defect_entries=defect_entries):\n        for de in g:\n            assert de.defect.name == g_name\n\n    named_defect_entries = copy.deepcopy(defect_entries)\n    bulk_formula = defect_entries[0].defect.structure.composition.reduced_formula\n    for de in named_defect_entries:\n        de.defect = NamedDefect(\n            name=de.defect.name, bulk_formula=bulk_formula, element_changes=None\n        )\n\n    for g_name, g in group_defect_entries(defect_entries=named_defect_entries):\n        for de in g:\n            assert de.defect.name == g_name"
    ],
    "global variables": []
}