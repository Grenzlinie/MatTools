{
    "uuid": "55d4cfc6-6f0f-40af-b9e6-62dce542c540",
    "filename": "/Users/siyuliu/Desktop/MacBot/src/tool_source_code/pymatgen-analysis-defects/tests/test_core.py",
    "imports": [
        "import numpy as np",
        "from pymatgen.analysis.defects.core import (\n    Adsorbate,\n    DefectComplex,\n    Interstitial,\n    NamedDefect,\n    PeriodicSite,\n    Substitution,\n    Vacancy,\n)",
        "from pymatgen.analysis.defects.finder import DefectSiteFinder",
        "from pymatgen.core import Structure",
        "from pymatgen.core.periodic_table import Element, Specie"
    ],
    "classes": [],
    "global functions": [
        "def test_vacancy(gan_struct) -> None:\n    s = gan_struct.copy()\n    vac = Vacancy(s, s.sites[0])\n    vac2 = Vacancy(s, s.sites[1])\n    assert vac == vac2  # symmetry equivalent sites\n    assert str(vac) == \"Ga Vacancy defect at site #0\"\n    assert vac.oxi_state == -3\n    assert vac.get_charge_states() == [-4, -3, -2, -1, 0, 1]\n    assert vac.get_multiplicity() == 2\n    assert vac.get_supercell_structure().formula == \"Ga63 N64\"\n    assert vac.name == \"v_Ga\"\n    assert vac == vac\n    assert vac.element_changes == {Element(\"Ga\"): -1}\n    assert vac.latex_name == r\"v$_{\\rm Ga}$\"",
        "def test_substitution(gan_struct) -> None:\n    s = gan_struct.copy()\n    n_site = s.sites[3]\n    assert n_site.specie.symbol == \"N\"\n    o_site = PeriodicSite(Specie(\"O\"), n_site.frac_coords, s.lattice)\n    o_site2 = PeriodicSite(Specie(\"O\"), s.sites[2].frac_coords, s.lattice)\n    sub = Substitution(s, o_site)\n    sub2 = Substitution(s, o_site2)\n    assert sub == sub2  # symmetry equivalent sites\n    assert str(sub) == \"O subsitituted on the N site at at site #3\"\n    assert sub.oxi_state == 1\n    assert sub.get_charge_states() == [-1, 0, 1, 2]\n    assert sub.get_multiplicity() == 2\n    sc, site_ = sub.get_supercell_structure(return_site=True)\n    assert site_.specie.symbol == \"O\"\n    assert sc.formula == \"Ga64 N63 O1\"\n    assert sub.name == \"O_N\"\n    assert sub.latex_name == r\"O$_{\\rm N}$\"\n    assert sub == sub\n    assert sub.element_changes == {Element(\"N\"): -1, Element(\"O\"): 1}\n    assert sub.latex_name == r\"O$_{\\rm N}$\"\n\n    # test supercell with locking\n    sc_locked = sub.get_supercell_structure(relax_radius=5.0)\n    free_sites = [\n        i\n        for i, site in enumerate(sc_locked)\n        if site.properties[\"selective_dynamics\"][0]\n    ]\n\n    finder = DefectSiteFinder()\n    fpos = finder.get_defect_fpos(sc_locked, sub.structure)\n    cpos = sc_locked.lattice.get_cartesian_coords(fpos)\n    free_sites_ref = sc_locked.get_sites_in_sphere(cpos, 5.0, include_index=True)\n    free_sites_ref = [site.index for site in free_sites_ref]\n    free_sites_union = set(free_sites_ref) | set(free_sites)\n    free_sites_intersection = set(free_sites_ref) & set(free_sites)\n    assert len(free_sites_intersection) / len(free_sites_union) == 1.0\n\n    # test perturbation\n    sc_locked = sub.get_supercell_structure(relax_radius=5.0, perturb=0.0)\n    free_sites_ref2 = sc_locked.get_sites_in_sphere(cpos, 5.0, include_index=True)\n    free_sites_ref2 = [site.index for site in free_sites_ref2]\n    assert set(free_sites_ref2) == set(free_sites_ref)\n\n    # test for user defined charge\n    dd = sub.as_dict()\n    dd[\"user_charges\"] = [-100, 102]\n    sub_ = Substitution.from_dict(dd)\n    assert sub_.get_charge_states() == [-100, 102]\n\n    dd[\"user_charges\"] = []  # empty list == None => use oxidation state info\n    sub_ = Substitution.from_dict(dd)\n    assert sub_.get_charge_states() == [-1, 0, 1, 2]\n\n    # test target_frac_coords with get_supercell_structure\n    sub_sc_struct = sub.get_supercell_structure()\n    finder = DefectSiteFinder()\n    fpos = finder.get_defect_fpos(sub_sc_struct, sub.structure)\n    assert np.allclose(fpos, [0.1250, 0.0833335, 0.18794])\n    # change target coords:\n    sub_sc_struct = sub.get_supercell_structure(target_frac_coords=[0.3, 0.5, 0.9])\n    fpos = finder.get_defect_fpos(sub_sc_struct, sub.structure)\n    assert np.allclose(fpos, [0.375, 0.5833335, 0.68794])  # closest equivalent site\n\n    # test oxidation state setting for substitutional defects when substitution is an antisite:\n    # from pymatgen.analysis.defects.generators import AntiSiteGenerator\n    ga_site = s.sites[0]\n    assert ga_site.specie.symbol == \"Ga\"\n    n_site = PeriodicSite(Specie(\"N\"), ga_site.frac_coords, s.lattice)\n    n_ga = Substitution(s, n_site)\n    assert n_ga.get_charge_states() == [-7, -6, -5, -4, -3, -2, -1, 0, 1]\n\n    # test also works fine when input structure does not have oxidation states:\n    s.remove_oxidation_states()\n    ga_site = s.sites[0]\n    assert ga_site.specie.symbol == \"Ga\"\n    n_site = PeriodicSite(Element(\"N\"), ga_site.frac_coords, s.lattice)\n    n_ga = Substitution(s, n_site)\n    assert n_ga.get_charge_states() == [-7, -6, -5, -4, -3, -2, -1, 0, 1]\n\n    n_ga.user_charges = [-100, 102]\n    assert n_ga.get_charge_states() == [-100, 102]",
        "def test_interstitial(gan_struct) -> None:\n    s = gan_struct.copy()\n    inter_fpos = [0, 0, 0.75]\n    n_site = PeriodicSite(Specie(\"N\"), inter_fpos, s.lattice)\n    inter = Interstitial(s, n_site)\n    assert inter.oxi_state == 3\n    assert inter.get_charge_states() == [-1, 0, 1, 2, 3, 4]\n    assert np.allclose(inter.defect_structure[0].frac_coords, inter_fpos)\n    sc = inter.get_supercell_structure()\n    assert sc.formula == \"Ga64 N65\"\n    assert inter.name == \"N_i\"\n    assert str(inter) == \"N intersitial site at [0.00,0.00,0.75]\"\n    assert inter.element_changes == {Element(\"N\"): 1}\n    assert inter.latex_name == r\"N$_{\\rm i}$\"\n\n    # test target_frac_coords with get_supercell_structure\n    finder = DefectSiteFinder()\n    fpos = finder.get_defect_fpos(sc, inter.structure)\n    assert np.allclose(fpos, [0, 0, 0.398096581])\n    # change target coords:\n    inter_sc_struct = inter.get_supercell_structure(target_frac_coords=[0.3, 0.5, 0.9])\n    fpos = finder.get_defect_fpos(inter_sc_struct, inter.structure)\n    assert np.allclose(fpos, [0.25, 0.5, 0.89809658])  # closest equivalent site\n\n    inter2 = Interstitial(s, n_site)\n    inter2.user_charges = [-100, 102]\n    assert inter2.get_charge_states() == [-100, 102]",
        "def test_adsorbate(gan_struct) -> None:\n    s = gan_struct.copy()\n    ads_fpos = [0, 0, 0.75]\n    n_site = PeriodicSite(Specie(\"N\"), ads_fpos, s.lattice)\n    ads = Adsorbate(s, n_site)\n    assert ads.name == \"N_{ads}\"\n    assert str(ads) == \"N adsorbate site at [0.00,0.00,0.75]\"",
        "def test_complex(gan_struct) -> None:\n    s = gan_struct.copy()\n    o_site = PeriodicSite(Specie(\"O\"), s[3].frac_coords, s.lattice)\n    sub = Substitution(s, o_site)  # O substituted on N site\n    vac = Vacancy(s, s.sites[0])  # Ga vacancy\n    inter = Interstitial(\n        s, PeriodicSite(Specie(\"H\"), [0, 0, 0.75], s.lattice)\n    )  # H interstitial\n    dc = DefectComplex([sub, vac])\n    assert dc.name == \"O_N+v_Ga\"\n    sc_struct = dc.get_supercell_structure()\n    assert sc_struct.formula == \"Ga63 N63 O1\"\n    dc.oxi_state == sub.oxi_state + vac.oxi_state\n    dc.element_changes == {Element(\"Ga\"): -1, Element(\"N\"): -1, Element(\"O\"): 1}\n    dc.defect_structure.formula == \"Ga1 N1 O1\"\n\n    dc2 = DefectComplex([sub, vac, inter])\n    assert dc2.name == \"O_N+v_Ga+H_i\"\n    sc_struct = dc2.get_supercell_structure(dummy_species=\"Xe\")\n    assert sc_struct.formula == \"Ga63 H1 Xe1 N63 O1\"  # Three defects only one dummy\n\n    assert dc2 == dc2\n    assert dc2 != dc",
        "def test_parsing_and_grouping_NamedDefects(test_dir) -> None:\n    bulk_dir = test_dir / \"Mg_Ga\" / \"bulk_sc\"\n    defect_dir = test_dir / \"Mg_Ga\" / \"q=0\"\n    bulk_struct = Structure.from_file(bulk_dir / \"CONTCAR.gz\")\n    defect_struct = Structure.from_file(defect_dir / \"CONTCAR.gz\")\n\n    nd0 = NamedDefect.from_structures(\n        defect_structure=defect_struct, bulk_structure=bulk_struct\n    )\n\n    assert nd0.element_changes == {Element(\"Mg\"): 1, Element(\"Ga\"): -1}\n    nd1 = NamedDefect(name=\"v_Ga\", bulk_formula=\"GaN\", element_changes={\"Ga\": -1})\n    nd2 = NamedDefect(\n        name=\"Mg_Ga\", bulk_formula=\"GaN\", element_changes={\"Mg\": 1, \"Ga\": -1}\n    )\n    assert str(nd0) == \"GaN:Mg_Ga\"\n    assert nd0 != nd1\n    assert nd0 == nd2"
    ],
    "global variables": []
}