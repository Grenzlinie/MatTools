{
    "uuid": "7013817d-1d81-4e28-8abd-0b37c6f3a17f",
    "filename": "/Users/siyuliu/Desktop/MacBot/src/tool_source_code/pymatgen-analysis-defects/tests/conftest.py",
    "imports": [
        "from collections import defaultdict",
        "from pathlib import Path",
        "import pytest",
        "from monty.serialization import loadfn",
        "from pymatgen.analysis.defects.core import PeriodicSite, Substitution",
        "from pymatgen.analysis.defects.thermo import DefectEntry, FormationEnergyDiagram",
        "from pymatgen.analysis.phase_diagram import PhaseDiagram",
        "from pymatgen.core import Element, Structure",
        "from pymatgen.core.periodic_table import Specie",
        "from pymatgen.io.vasp.outputs import WSWQ, Chgcar, Locpot, Procar, Vasprun"
    ],
    "classes": [],
    "global functions": [
        "@pytest.fixture(scope=\"session\")\ndef test_dir():\n    return Path.cwd() / 'tool_source_code/pymatgen-analysis-defects/tests/test_files/'",
        "@pytest.fixture(scope=\"session\")\ndef gan_struct(test_dir):\n    return Structure.from_file(test_dir / \"GaN.vasp\")",
        "@pytest.fixture(scope=\"session\")\ndef stable_entries_Mg_Ga_N(test_dir):\n    return loadfn(test_dir / \"stable_entries_Mg_Ga_N.json\")",
        "@pytest.fixture(scope=\"session\")\ndef defect_Mg_Ga(gan_struct):\n    ga_site = gan_struct[0]\n    mg_site = PeriodicSite(Specie(\"Mg\"), ga_site.frac_coords, gan_struct.lattice)\n    return Substitution(gan_struct, mg_site)",
        "@pytest.fixture(scope=\"session\")\ndef data_Mg_Ga(test_dir):\n    \"\"\"Get the data in the following format:\n    {\n        \"bulk_sc\": {\n            \"vasp_run\": Vasprun,\n            \"locpot\": Locpot,\n        },\n        \"q=1\": {\n            \"vasp_run\": Vasprun,\n            \"locpot\": Locpot,\n        },\n        ...\n    }.\n    \"\"\"\n    root_dir = test_dir / \"Mg_Ga\"\n    data = defaultdict(dict)\n    for fold in root_dir.glob(\"./*\"):\n        if not fold.is_dir():\n            continue\n        data[fold.name] = {\n            \"vasprun\": Vasprun(fold / \"vasprun.xml.gz\"),\n            \"locpot\": Locpot.from_file(fold / \"LOCPOT.gz\"),\n        }\n    return data",
        "@pytest.fixture(scope=\"session\")\ndef defect_entries_and_plot_data_Mg_Ga(data_Mg_Ga, defect_Mg_Ga):\n    bulk_locpot = data_Mg_Ga[\"bulk_sc\"][\"locpot\"]\n\n    def get_data(q):\n        computed_entry = data_Mg_Ga[f\"q={q}\"][\"vasprun\"].get_computed_entry(\n            inc_structure=True\n        )\n        defect_locpot = data_Mg_Ga[f\"q={q}\"][\"locpot\"]\n\n        def_entry = DefectEntry(\n            defect=defect_Mg_Ga, charge_state=q, sc_entry=computed_entry\n        )\n        frey_summary = def_entry.get_freysoldt_correction(\n            defect_locpot=defect_locpot, bulk_locpot=bulk_locpot, dielectric=14\n        )\n        return def_entry, frey_summary\n\n    defect_entries = dict()\n    plot_data = dict()\n    for qq in [-2, -1, 0, 1]:\n        defect_entry, frey_summary = get_data(qq)\n        defect_entries[qq] = defect_entry\n        plot_data[qq] = frey_summary.metadata[\"plot_data\"]\n    return defect_entries, plot_data",
        "@pytest.fixture(scope=\"session\")\ndef chgcar_fe3o4(test_dir):\n    return Chgcar.from_file(test_dir / \"CHGCAR.Fe3O4.vasp\")",
        "@pytest.fixture(scope=\"session\")\ndef v_ga(test_dir):\n    res = dict()\n    for q1, q2 in [(0, -1), (-1, 0)]:\n        ccd_dir = test_dir / f\"v_Ga/ccd_{q1}_{q2}\"\n        vaspruns = [Vasprun(ccd_dir / f\"{i}/vasprun.xml\") for i in [0, 1, 2]]\n        wswq_dir = ccd_dir / \"wswqs\"\n        wswq_files = [f for f in wswq_dir.glob(\"WSWQ*\")]\n        wswq_files.sort(\n            key=lambda x: int(x.name.split(\".\")[1])\n        )  # does stem work for non-zipped files?\n        wswqs = [WSWQ.from_file(f) for f in wswq_files]\n        # wswqs = [WSWQ.from_file(ccd_dir / \"wswqs\" / f\"WSWQ.{i}.gz\") for i in [0, 1, 2]]\n        res[(q1, q2)] = {\n            \"vaspruns\": vaspruns,\n            \"procar\": Procar(ccd_dir / \"1/PROCAR\"),\n            \"wswqs\": wswqs,\n        }\n    return res",
        "@pytest.fixture(scope=\"session\")\ndef v_N_GaN(test_dir):\n    \"\"\"More complex.\"\"\"\n    bulk_locpot = Locpot.from_file(test_dir / \"v_N_GaN/bulk/LOCPOT.gz\")\n    return {\n        \"bulk_locpot\": bulk_locpot,\n        \"defect_locpots\": {\n            -1: Locpot.from_file(test_dir / \"v_N_GaN/q=-1/LOCPOT.gz\"),\n            0: Locpot.from_file(test_dir / \"v_N_GaN/q=0/LOCPOT.gz\"),\n            1: Locpot.from_file(test_dir / \"v_N_GaN/q=1/LOCPOT.gz\"),\n            2: Locpot.from_file(test_dir / \"v_N_GaN/q=2/LOCPOT.gz\"),\n        },\n    }",
        "@pytest.fixture(scope=\"session\")\ndef basic_fed(data_Mg_Ga, defect_entries_and_plot_data_Mg_Ga, stable_entries_Mg_Ga_N):\n    bulk_vasprun = data_Mg_Ga[\"bulk_sc\"][\"vasprun\"]\n    bulk_bs = bulk_vasprun.get_band_structure()\n    vbm = bulk_bs.get_vbm()[\"energy\"]\n    bulk_entry = bulk_vasprun.get_computed_entry(inc_structure=False)\n    defect_entries, _ = defect_entries_and_plot_data_Mg_Ga\n\n    def_ent_list = list(defect_entries.values())\n    # test the constructor with materials project phase diagram\n    atomic_entries = list(\n        filter(lambda x: len(x.composition.elements) == 1, stable_entries_Mg_Ga_N)\n    )\n    pd = PhaseDiagram(stable_entries_Mg_Ga_N)\n    # test the constructor with atomic entries\n    # this is the one we will use for the rest of the tests\n    fed = FormationEnergyDiagram.with_atomic_entries(\n        defect_entries=def_ent_list,\n        atomic_entries=atomic_entries,\n        vbm=vbm,\n        inc_inf_values=False,\n        phase_diagram=pd,\n        bulk_entry=bulk_entry,\n    )\n    assert len(fed.chempot_limits) == 3\n\n    # dataframe conversion\n    df = fed.as_dataframe()\n    assert df.shape == (4, 5)\n\n    # test that you can get the Ga-rich chempot\n    cp = fed.get_chempots(rich_element=Element(\"Ga\"))\n    assert cp[Element(\"Ga\")] == pytest.approx(0, abs=1e-2)\n    fed.band_gap = 2\n    return fed",
        "@pytest.fixture(scope=\"session\")\ndef hd0(v_ga):\n    vaspruns = v_ga[(0, -1)][\"vaspruns\"]\n    procar = v_ga[(0, -1)][\"procar\"]\n    hd0 = HarmonicDefect.from_vaspruns(\n        vaspruns,\n        charge_state=0,\n        procar=procar,\n        store_bandstructure=True,\n    )\n    assert hd0.spin_index == 1\n    assert pytest.approx(hd0.distortions[1]) == 0.0\n    assert pytest.approx(hd0.omega_eV) == 0.03268045792725\n    assert hd0.defect_band == [(138, 0, 1), (138, 1, 1)]\n    assert hd0._get_ediff(output_order=\"bks\").shape == (216, 2, 2)\n    assert hd0._get_ediff(output_order=\"skb\").shape == (2, 2, 216)\n    return hd0",
        "@pytest.fixture(scope=\"session\")\ndef hd1(v_ga):\n    vaspruns = v_ga[(-1, 0)][\"vaspruns\"]\n    procar = v_ga[(-1, 0)][\"procar\"]\n    hd1 = HarmonicDefect.from_vaspruns(\n        vaspruns,\n        charge_state=1,\n        procar=procar,\n        store_bandstructure=True,\n    )\n    assert pytest.approx(hd1.omega_eV) == 0.03341323356861477\n    return hd1",
        "@pytest.fixture(scope=\"module\")\ndef formation_energy_diagram(\n    data_Mg_Ga, defect_entries_and_plot_data_Mg_Ga, stable_entries_Mg_Ga_N\n):\n    bulk_vasprun = data_Mg_Ga[\"bulk_sc\"][\"vasprun\"]\n    bulk_bs = bulk_vasprun.get_band_structure()\n    vbm = bulk_bs.get_vbm()[\"energy\"]\n    bulk_entry = bulk_vasprun.get_computed_entry(inc_structure=False)\n    defect_entries, _ = defect_entries_and_plot_data_Mg_Ga\n\n    def_ent_list = list(defect_entries.values())\n    # test the constructor with materials project phase diagram\n    atomic_entries = list(\n        filter(lambda x: len(x.composition.elements) == 1, stable_entries_Mg_Ga_N)\n    )\n    pd = PhaseDiagram(stable_entries_Mg_Ga_N)\n\n    # test basic constructor\n    fed_ = FormationEnergyDiagram(\n        bulk_entry=bulk_entry,\n        defect_entries=def_ent_list,\n        vbm=vbm,\n        pd_entries=stable_entries_Mg_Ga_N,\n        inc_inf_values=True,  # include the two additional points at infinity\n    )\n    assert len(fed_.chempot_limits) == 5\n\n    # test the constructor with atomic entries\n    # this is the one we will use for the rest of the tests\n    fed = FormationEnergyDiagram.with_atomic_entries(\n        defect_entries=def_ent_list,\n        atomic_entries=atomic_entries,\n        vbm=vbm,\n        inc_inf_values=False,\n        phase_diagram=pd,\n        bulk_entry=bulk_entry,\n    )\n    assert len(fed.chempot_limits) == 3\n\n    # dataframe conversion\n    df = fed.as_dataframe()\n    assert df.shape == (4, 5)\n\n    # test that you can get the Ga-rich chempot\n    cp = fed.get_chempots(rich_element=Element(\"Ga\"))\n    assert cp[Element(\"Ga\")] == pytest.approx(0, abs=1e-2)\n\n    return fed",
        "@pytest.fixture()\ndef plot_fn():\n    def _plot(*args):\n        plot_formation_energy_diagrams(*args, save=True, show=True)\n        yield plt.show()\n        plt.close(\"all\")\n        os.remove(\"formation_energy_diagram.png\")\n\n    return _plot"
    ],
    "global variables": []
}